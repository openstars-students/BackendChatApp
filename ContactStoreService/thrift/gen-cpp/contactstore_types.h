/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef contactstore_TYPES_H
#define contactstore_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace OpenStars { namespace Platform { namespace ContactStore {

struct TErrorCode {
  enum type {
    EGood = 0,
    ENotFound = -1,
    EUnknown = -2,
    EDataExisted = -3
  };
};

extern const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val);

typedef int64_t TKey;

typedef class TValue TData;

class TValue;

class TDataResult;

typedef struct _TValue__isset {
  _TValue__isset() : uid(false), listuid(false) {}
  bool uid :1;
  bool listuid :1;
} _TValue__isset;

class TValue : public virtual ::apache::thrift::TBase {
 public:

  TValue(const TValue&);
  TValue& operator=(const TValue&);
  TValue() : uid(0) {
  }

  virtual ~TValue() throw();
  TKey uid;
  std::vector<int64_t>  listuid;

  _TValue__isset __isset;

  void __set_uid(const TKey val);

  void __set_listuid(const std::vector<int64_t> & val);

  bool operator == (const TValue & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(listuid == rhs.listuid))
      return false;
    return true;
  }
  bool operator != (const TValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TValue &a, TValue &b);

std::ostream& operator<<(std::ostream& out, const TValue& obj);

typedef struct _TDataResult__isset {
  _TDataResult__isset() : errorCode(false), data(false) {}
  bool errorCode :1;
  bool data :1;
} _TDataResult__isset;

class TDataResult : public virtual ::apache::thrift::TBase {
 public:

  TDataResult(const TDataResult&);
  TDataResult& operator=(const TDataResult&);
  TDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TDataResult() throw();
  TErrorCode::type errorCode;
  TValue data;

  _TDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_data(const TValue& val);

  bool operator == (const TDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataResult &a, TDataResult &b);

std::ostream& operator<<(std::ostream& out, const TDataResult& obj);

}}} // namespace

#endif
