// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TI64ToI64SetServiceR.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::OpenStars::Core::I64ToI64Set;

class TI64ToI64SetServiceRHandler : virtual public TI64ToI64SetServiceRIf {
 public:
  TI64ToI64SetServiceRHandler() {
    // Your initialization goes here
  }

  void getValue( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key) {
    // Your implementation goes here
    printf("getValue\n");
  }

  void getValue_random( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t size) {
    // Your implementation goes here
    printf("getValue_random\n");
  }

  void getValue_slice( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t idxFrom, const int32_t size) {
    // Your implementation goes here
    printf("getValue_slice\n");
  }

  void getValueMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue> & _return, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys) {
    // Your implementation goes here
    printf("getValueMulti\n");
  }

  bool hasItem(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const  ::OpenStars::Core::I64ToI64Set::Data::TItem item) {
    // Your implementation goes here
    printf("hasItem\n");
  }

  int32_t getSize(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key) {
    // Your implementation goes here
    printf("getSize\n");
  }

  void getSizeMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t> & _return, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys) {
    // Your implementation goes here
    printf("getSizeMulti\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<TI64ToI64SetServiceRHandler> handler(new TI64ToI64SetServiceRHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new TI64ToI64SetServiceRProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

