/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TI64ToI64SetServiceR_H
#define TI64ToI64SetServiceR_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "i64toi64setservice_types.h"

namespace OpenStars { namespace Core { namespace I64ToI64Set {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TI64ToI64SetServiceRIf {
 public:
  virtual ~TI64ToI64SetServiceRIf() {}
  virtual void getValue( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key) = 0;
  virtual void getValue_random( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t size) = 0;
  virtual void getValue_slice( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t idxFrom, const int32_t size) = 0;
  virtual void getValueMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue> & _return, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys) = 0;
  virtual bool hasItem(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const  ::OpenStars::Core::I64ToI64Set::Data::TItem item) = 0;
  virtual int32_t getSize(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key) = 0;
  virtual void getSizeMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t> & _return, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys) = 0;
};

class TI64ToI64SetServiceRIfFactory {
 public:
  typedef TI64ToI64SetServiceRIf Handler;

  virtual ~TI64ToI64SetServiceRIfFactory() {}

  virtual TI64ToI64SetServiceRIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TI64ToI64SetServiceRIf* /* handler */) = 0;
};

class TI64ToI64SetServiceRIfSingletonFactory : virtual public TI64ToI64SetServiceRIfFactory {
 public:
  TI64ToI64SetServiceRIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<TI64ToI64SetServiceRIf>& iface) : iface_(iface) {}
  virtual ~TI64ToI64SetServiceRIfSingletonFactory() {}

  virtual TI64ToI64SetServiceRIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TI64ToI64SetServiceRIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<TI64ToI64SetServiceRIf> iface_;
};

class TI64ToI64SetServiceRNull : virtual public TI64ToI64SetServiceRIf {
 public:
  virtual ~TI64ToI64SetServiceRNull() {}
  void getValue( ::OpenStars::Core::I64ToI64Set::Data::TValue& /* _return */, const  ::OpenStars::Core::I64ToI64Set::Data::TKey /* key */) {
    return;
  }
  void getValue_random( ::OpenStars::Core::I64ToI64Set::Data::TValue& /* _return */, const  ::OpenStars::Core::I64ToI64Set::Data::TKey /* key */, const int32_t /* size */) {
    return;
  }
  void getValue_slice( ::OpenStars::Core::I64ToI64Set::Data::TValue& /* _return */, const  ::OpenStars::Core::I64ToI64Set::Data::TKey /* key */, const int32_t /* idxFrom */, const int32_t /* size */) {
    return;
  }
  void getValueMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue> & /* _return */, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & /* keys */) {
    return;
  }
  bool hasItem(const  ::OpenStars::Core::I64ToI64Set::Data::TKey /* key */, const  ::OpenStars::Core::I64ToI64Set::Data::TItem /* item */) {
    bool _return = false;
    return _return;
  }
  int32_t getSize(const  ::OpenStars::Core::I64ToI64Set::Data::TKey /* key */) {
    int32_t _return = 0;
    return _return;
  }
  void getSizeMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t> & /* _return */, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & /* keys */) {
    return;
  }
};

typedef struct _TI64ToI64SetServiceR_getValue_args__isset {
  _TI64ToI64SetServiceR_getValue_args__isset() : key(false) {}
  bool key :1;
} _TI64ToI64SetServiceR_getValue_args__isset;

class TI64ToI64SetServiceR_getValue_args {
 public:

  TI64ToI64SetServiceR_getValue_args(const TI64ToI64SetServiceR_getValue_args&);
  TI64ToI64SetServiceR_getValue_args& operator=(const TI64ToI64SetServiceR_getValue_args&);
  TI64ToI64SetServiceR_getValue_args() : key(0) {
  }

  virtual ~TI64ToI64SetServiceR_getValue_args() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TKey key;

  _TI64ToI64SetServiceR_getValue_args__isset __isset;

  void __set_key(const  ::OpenStars::Core::I64ToI64Set::Data::TKey val);

  bool operator == (const TI64ToI64SetServiceR_getValue_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TI64ToI64SetServiceR_getValue_pargs {
 public:


  virtual ~TI64ToI64SetServiceR_getValue_pargs() throw();
  const  ::OpenStars::Core::I64ToI64Set::Data::TKey* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getValue_result__isset {
  _TI64ToI64SetServiceR_getValue_result__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getValue_result__isset;

class TI64ToI64SetServiceR_getValue_result {
 public:

  TI64ToI64SetServiceR_getValue_result(const TI64ToI64SetServiceR_getValue_result&);
  TI64ToI64SetServiceR_getValue_result& operator=(const TI64ToI64SetServiceR_getValue_result&);
  TI64ToI64SetServiceR_getValue_result() {
  }

  virtual ~TI64ToI64SetServiceR_getValue_result() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TValue success;

  _TI64ToI64SetServiceR_getValue_result__isset __isset;

  void __set_success(const  ::OpenStars::Core::I64ToI64Set::Data::TValue& val);

  bool operator == (const TI64ToI64SetServiceR_getValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getValue_presult__isset {
  _TI64ToI64SetServiceR_getValue_presult__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getValue_presult__isset;

class TI64ToI64SetServiceR_getValue_presult {
 public:


  virtual ~TI64ToI64SetServiceR_getValue_presult() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TValue* success;

  _TI64ToI64SetServiceR_getValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TI64ToI64SetServiceR_getValue_random_args__isset {
  _TI64ToI64SetServiceR_getValue_random_args__isset() : key(false), size(false) {}
  bool key :1;
  bool size :1;
} _TI64ToI64SetServiceR_getValue_random_args__isset;

class TI64ToI64SetServiceR_getValue_random_args {
 public:

  TI64ToI64SetServiceR_getValue_random_args(const TI64ToI64SetServiceR_getValue_random_args&);
  TI64ToI64SetServiceR_getValue_random_args& operator=(const TI64ToI64SetServiceR_getValue_random_args&);
  TI64ToI64SetServiceR_getValue_random_args() : key(0), size(0) {
  }

  virtual ~TI64ToI64SetServiceR_getValue_random_args() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TKey key;
  int32_t size;

  _TI64ToI64SetServiceR_getValue_random_args__isset __isset;

  void __set_key(const  ::OpenStars::Core::I64ToI64Set::Data::TKey val);

  void __set_size(const int32_t val);

  bool operator == (const TI64ToI64SetServiceR_getValue_random_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getValue_random_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getValue_random_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TI64ToI64SetServiceR_getValue_random_pargs {
 public:


  virtual ~TI64ToI64SetServiceR_getValue_random_pargs() throw();
  const  ::OpenStars::Core::I64ToI64Set::Data::TKey* key;
  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getValue_random_result__isset {
  _TI64ToI64SetServiceR_getValue_random_result__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getValue_random_result__isset;

class TI64ToI64SetServiceR_getValue_random_result {
 public:

  TI64ToI64SetServiceR_getValue_random_result(const TI64ToI64SetServiceR_getValue_random_result&);
  TI64ToI64SetServiceR_getValue_random_result& operator=(const TI64ToI64SetServiceR_getValue_random_result&);
  TI64ToI64SetServiceR_getValue_random_result() {
  }

  virtual ~TI64ToI64SetServiceR_getValue_random_result() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TValue success;

  _TI64ToI64SetServiceR_getValue_random_result__isset __isset;

  void __set_success(const  ::OpenStars::Core::I64ToI64Set::Data::TValue& val);

  bool operator == (const TI64ToI64SetServiceR_getValue_random_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getValue_random_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getValue_random_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getValue_random_presult__isset {
  _TI64ToI64SetServiceR_getValue_random_presult__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getValue_random_presult__isset;

class TI64ToI64SetServiceR_getValue_random_presult {
 public:


  virtual ~TI64ToI64SetServiceR_getValue_random_presult() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TValue* success;

  _TI64ToI64SetServiceR_getValue_random_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TI64ToI64SetServiceR_getValue_slice_args__isset {
  _TI64ToI64SetServiceR_getValue_slice_args__isset() : key(false), idxFrom(false), size(false) {}
  bool key :1;
  bool idxFrom :1;
  bool size :1;
} _TI64ToI64SetServiceR_getValue_slice_args__isset;

class TI64ToI64SetServiceR_getValue_slice_args {
 public:

  TI64ToI64SetServiceR_getValue_slice_args(const TI64ToI64SetServiceR_getValue_slice_args&);
  TI64ToI64SetServiceR_getValue_slice_args& operator=(const TI64ToI64SetServiceR_getValue_slice_args&);
  TI64ToI64SetServiceR_getValue_slice_args() : key(0), idxFrom(0), size(0) {
  }

  virtual ~TI64ToI64SetServiceR_getValue_slice_args() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TKey key;
  int32_t idxFrom;
  int32_t size;

  _TI64ToI64SetServiceR_getValue_slice_args__isset __isset;

  void __set_key(const  ::OpenStars::Core::I64ToI64Set::Data::TKey val);

  void __set_idxFrom(const int32_t val);

  void __set_size(const int32_t val);

  bool operator == (const TI64ToI64SetServiceR_getValue_slice_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(idxFrom == rhs.idxFrom))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getValue_slice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getValue_slice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TI64ToI64SetServiceR_getValue_slice_pargs {
 public:


  virtual ~TI64ToI64SetServiceR_getValue_slice_pargs() throw();
  const  ::OpenStars::Core::I64ToI64Set::Data::TKey* key;
  const int32_t* idxFrom;
  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getValue_slice_result__isset {
  _TI64ToI64SetServiceR_getValue_slice_result__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getValue_slice_result__isset;

class TI64ToI64SetServiceR_getValue_slice_result {
 public:

  TI64ToI64SetServiceR_getValue_slice_result(const TI64ToI64SetServiceR_getValue_slice_result&);
  TI64ToI64SetServiceR_getValue_slice_result& operator=(const TI64ToI64SetServiceR_getValue_slice_result&);
  TI64ToI64SetServiceR_getValue_slice_result() {
  }

  virtual ~TI64ToI64SetServiceR_getValue_slice_result() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TValue success;

  _TI64ToI64SetServiceR_getValue_slice_result__isset __isset;

  void __set_success(const  ::OpenStars::Core::I64ToI64Set::Data::TValue& val);

  bool operator == (const TI64ToI64SetServiceR_getValue_slice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getValue_slice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getValue_slice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getValue_slice_presult__isset {
  _TI64ToI64SetServiceR_getValue_slice_presult__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getValue_slice_presult__isset;

class TI64ToI64SetServiceR_getValue_slice_presult {
 public:


  virtual ~TI64ToI64SetServiceR_getValue_slice_presult() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TValue* success;

  _TI64ToI64SetServiceR_getValue_slice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TI64ToI64SetServiceR_getValueMulti_args__isset {
  _TI64ToI64SetServiceR_getValueMulti_args__isset() : keys(false) {}
  bool keys :1;
} _TI64ToI64SetServiceR_getValueMulti_args__isset;

class TI64ToI64SetServiceR_getValueMulti_args {
 public:

  TI64ToI64SetServiceR_getValueMulti_args(const TI64ToI64SetServiceR_getValueMulti_args&);
  TI64ToI64SetServiceR_getValueMulti_args& operator=(const TI64ToI64SetServiceR_getValueMulti_args&);
  TI64ToI64SetServiceR_getValueMulti_args() {
  }

  virtual ~TI64ToI64SetServiceR_getValueMulti_args() throw();
  std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey>  keys;

  _TI64ToI64SetServiceR_getValueMulti_args__isset __isset;

  void __set_keys(const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & val);

  bool operator == (const TI64ToI64SetServiceR_getValueMulti_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getValueMulti_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getValueMulti_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TI64ToI64SetServiceR_getValueMulti_pargs {
 public:


  virtual ~TI64ToI64SetServiceR_getValueMulti_pargs() throw();
  const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getValueMulti_result__isset {
  _TI64ToI64SetServiceR_getValueMulti_result__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getValueMulti_result__isset;

class TI64ToI64SetServiceR_getValueMulti_result {
 public:

  TI64ToI64SetServiceR_getValueMulti_result(const TI64ToI64SetServiceR_getValueMulti_result&);
  TI64ToI64SetServiceR_getValueMulti_result& operator=(const TI64ToI64SetServiceR_getValueMulti_result&);
  TI64ToI64SetServiceR_getValueMulti_result() {
  }

  virtual ~TI64ToI64SetServiceR_getValueMulti_result() throw();
  std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue>  success;

  _TI64ToI64SetServiceR_getValueMulti_result__isset __isset;

  void __set_success(const std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue> & val);

  bool operator == (const TI64ToI64SetServiceR_getValueMulti_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getValueMulti_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getValueMulti_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getValueMulti_presult__isset {
  _TI64ToI64SetServiceR_getValueMulti_presult__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getValueMulti_presult__isset;

class TI64ToI64SetServiceR_getValueMulti_presult {
 public:


  virtual ~TI64ToI64SetServiceR_getValueMulti_presult() throw();
  std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue> * success;

  _TI64ToI64SetServiceR_getValueMulti_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TI64ToI64SetServiceR_hasItem_args__isset {
  _TI64ToI64SetServiceR_hasItem_args__isset() : key(false), item(false) {}
  bool key :1;
  bool item :1;
} _TI64ToI64SetServiceR_hasItem_args__isset;

class TI64ToI64SetServiceR_hasItem_args {
 public:

  TI64ToI64SetServiceR_hasItem_args(const TI64ToI64SetServiceR_hasItem_args&);
  TI64ToI64SetServiceR_hasItem_args& operator=(const TI64ToI64SetServiceR_hasItem_args&);
  TI64ToI64SetServiceR_hasItem_args() : key(0), item(0) {
  }

  virtual ~TI64ToI64SetServiceR_hasItem_args() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TKey key;
   ::OpenStars::Core::I64ToI64Set::Data::TItem item;

  _TI64ToI64SetServiceR_hasItem_args__isset __isset;

  void __set_key(const  ::OpenStars::Core::I64ToI64Set::Data::TKey val);

  void __set_item(const  ::OpenStars::Core::I64ToI64Set::Data::TItem val);

  bool operator == (const TI64ToI64SetServiceR_hasItem_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_hasItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_hasItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TI64ToI64SetServiceR_hasItem_pargs {
 public:


  virtual ~TI64ToI64SetServiceR_hasItem_pargs() throw();
  const  ::OpenStars::Core::I64ToI64Set::Data::TKey* key;
  const  ::OpenStars::Core::I64ToI64Set::Data::TItem* item;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_hasItem_result__isset {
  _TI64ToI64SetServiceR_hasItem_result__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_hasItem_result__isset;

class TI64ToI64SetServiceR_hasItem_result {
 public:

  TI64ToI64SetServiceR_hasItem_result(const TI64ToI64SetServiceR_hasItem_result&);
  TI64ToI64SetServiceR_hasItem_result& operator=(const TI64ToI64SetServiceR_hasItem_result&);
  TI64ToI64SetServiceR_hasItem_result() : success(0) {
  }

  virtual ~TI64ToI64SetServiceR_hasItem_result() throw();
  bool success;

  _TI64ToI64SetServiceR_hasItem_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TI64ToI64SetServiceR_hasItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_hasItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_hasItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_hasItem_presult__isset {
  _TI64ToI64SetServiceR_hasItem_presult__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_hasItem_presult__isset;

class TI64ToI64SetServiceR_hasItem_presult {
 public:


  virtual ~TI64ToI64SetServiceR_hasItem_presult() throw();
  bool* success;

  _TI64ToI64SetServiceR_hasItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TI64ToI64SetServiceR_getSize_args__isset {
  _TI64ToI64SetServiceR_getSize_args__isset() : key(false) {}
  bool key :1;
} _TI64ToI64SetServiceR_getSize_args__isset;

class TI64ToI64SetServiceR_getSize_args {
 public:

  TI64ToI64SetServiceR_getSize_args(const TI64ToI64SetServiceR_getSize_args&);
  TI64ToI64SetServiceR_getSize_args& operator=(const TI64ToI64SetServiceR_getSize_args&);
  TI64ToI64SetServiceR_getSize_args() : key(0) {
  }

  virtual ~TI64ToI64SetServiceR_getSize_args() throw();
   ::OpenStars::Core::I64ToI64Set::Data::TKey key;

  _TI64ToI64SetServiceR_getSize_args__isset __isset;

  void __set_key(const  ::OpenStars::Core::I64ToI64Set::Data::TKey val);

  bool operator == (const TI64ToI64SetServiceR_getSize_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TI64ToI64SetServiceR_getSize_pargs {
 public:


  virtual ~TI64ToI64SetServiceR_getSize_pargs() throw();
  const  ::OpenStars::Core::I64ToI64Set::Data::TKey* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getSize_result__isset {
  _TI64ToI64SetServiceR_getSize_result__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getSize_result__isset;

class TI64ToI64SetServiceR_getSize_result {
 public:

  TI64ToI64SetServiceR_getSize_result(const TI64ToI64SetServiceR_getSize_result&);
  TI64ToI64SetServiceR_getSize_result& operator=(const TI64ToI64SetServiceR_getSize_result&);
  TI64ToI64SetServiceR_getSize_result() : success(0) {
  }

  virtual ~TI64ToI64SetServiceR_getSize_result() throw();
  int32_t success;

  _TI64ToI64SetServiceR_getSize_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TI64ToI64SetServiceR_getSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getSize_presult__isset {
  _TI64ToI64SetServiceR_getSize_presult__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getSize_presult__isset;

class TI64ToI64SetServiceR_getSize_presult {
 public:


  virtual ~TI64ToI64SetServiceR_getSize_presult() throw();
  int32_t* success;

  _TI64ToI64SetServiceR_getSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TI64ToI64SetServiceR_getSizeMulti_args__isset {
  _TI64ToI64SetServiceR_getSizeMulti_args__isset() : keys(false) {}
  bool keys :1;
} _TI64ToI64SetServiceR_getSizeMulti_args__isset;

class TI64ToI64SetServiceR_getSizeMulti_args {
 public:

  TI64ToI64SetServiceR_getSizeMulti_args(const TI64ToI64SetServiceR_getSizeMulti_args&);
  TI64ToI64SetServiceR_getSizeMulti_args& operator=(const TI64ToI64SetServiceR_getSizeMulti_args&);
  TI64ToI64SetServiceR_getSizeMulti_args() {
  }

  virtual ~TI64ToI64SetServiceR_getSizeMulti_args() throw();
  std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey>  keys;

  _TI64ToI64SetServiceR_getSizeMulti_args__isset __isset;

  void __set_keys(const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & val);

  bool operator == (const TI64ToI64SetServiceR_getSizeMulti_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getSizeMulti_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getSizeMulti_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TI64ToI64SetServiceR_getSizeMulti_pargs {
 public:


  virtual ~TI64ToI64SetServiceR_getSizeMulti_pargs() throw();
  const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getSizeMulti_result__isset {
  _TI64ToI64SetServiceR_getSizeMulti_result__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getSizeMulti_result__isset;

class TI64ToI64SetServiceR_getSizeMulti_result {
 public:

  TI64ToI64SetServiceR_getSizeMulti_result(const TI64ToI64SetServiceR_getSizeMulti_result&);
  TI64ToI64SetServiceR_getSizeMulti_result& operator=(const TI64ToI64SetServiceR_getSizeMulti_result&);
  TI64ToI64SetServiceR_getSizeMulti_result() {
  }

  virtual ~TI64ToI64SetServiceR_getSizeMulti_result() throw();
  std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t>  success;

  _TI64ToI64SetServiceR_getSizeMulti_result__isset __isset;

  void __set_success(const std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t> & val);

  bool operator == (const TI64ToI64SetServiceR_getSizeMulti_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TI64ToI64SetServiceR_getSizeMulti_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TI64ToI64SetServiceR_getSizeMulti_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TI64ToI64SetServiceR_getSizeMulti_presult__isset {
  _TI64ToI64SetServiceR_getSizeMulti_presult__isset() : success(false) {}
  bool success :1;
} _TI64ToI64SetServiceR_getSizeMulti_presult__isset;

class TI64ToI64SetServiceR_getSizeMulti_presult {
 public:


  virtual ~TI64ToI64SetServiceR_getSizeMulti_presult() throw();
  std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t> * success;

  _TI64ToI64SetServiceR_getSizeMulti_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TI64ToI64SetServiceRClient : virtual public TI64ToI64SetServiceRIf {
 public:
  TI64ToI64SetServiceRClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TI64ToI64SetServiceRClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getValue( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key);
  void send_getValue(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key);
  void recv_getValue( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return);
  void getValue_random( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t size);
  void send_getValue_random(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t size);
  void recv_getValue_random( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return);
  void getValue_slice( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t idxFrom, const int32_t size);
  void send_getValue_slice(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t idxFrom, const int32_t size);
  void recv_getValue_slice( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return);
  void getValueMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue> & _return, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys);
  void send_getValueMulti(const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys);
  void recv_getValueMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue> & _return);
  bool hasItem(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const  ::OpenStars::Core::I64ToI64Set::Data::TItem item);
  void send_hasItem(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const  ::OpenStars::Core::I64ToI64Set::Data::TItem item);
  bool recv_hasItem();
  int32_t getSize(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key);
  void send_getSize(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key);
  int32_t recv_getSize();
  void getSizeMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t> & _return, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys);
  void send_getSizeMulti(const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys);
  void recv_getSizeMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TI64ToI64SetServiceRProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<TI64ToI64SetServiceRIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TI64ToI64SetServiceRProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getValue_random(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getValue_slice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getValueMulti(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hasItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSizeMulti(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TI64ToI64SetServiceRProcessor(::apache::thrift::stdcxx::shared_ptr<TI64ToI64SetServiceRIf> iface) :
    iface_(iface) {
    processMap_["getValue"] = &TI64ToI64SetServiceRProcessor::process_getValue;
    processMap_["getValue_random"] = &TI64ToI64SetServiceRProcessor::process_getValue_random;
    processMap_["getValue_slice"] = &TI64ToI64SetServiceRProcessor::process_getValue_slice;
    processMap_["getValueMulti"] = &TI64ToI64SetServiceRProcessor::process_getValueMulti;
    processMap_["hasItem"] = &TI64ToI64SetServiceRProcessor::process_hasItem;
    processMap_["getSize"] = &TI64ToI64SetServiceRProcessor::process_getSize;
    processMap_["getSizeMulti"] = &TI64ToI64SetServiceRProcessor::process_getSizeMulti;
  }

  virtual ~TI64ToI64SetServiceRProcessor() {}
};

class TI64ToI64SetServiceRProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TI64ToI64SetServiceRProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< TI64ToI64SetServiceRIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< TI64ToI64SetServiceRIfFactory > handlerFactory_;
};

class TI64ToI64SetServiceRMultiface : virtual public TI64ToI64SetServiceRIf {
 public:
  TI64ToI64SetServiceRMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<TI64ToI64SetServiceRIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TI64ToI64SetServiceRMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<TI64ToI64SetServiceRIf> > ifaces_;
  TI64ToI64SetServiceRMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<TI64ToI64SetServiceRIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getValue( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValue(_return, key);
    }
    ifaces_[i]->getValue(_return, key);
    return;
  }

  void getValue_random( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValue_random(_return, key, size);
    }
    ifaces_[i]->getValue_random(_return, key, size);
    return;
  }

  void getValue_slice( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t idxFrom, const int32_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValue_slice(_return, key, idxFrom, size);
    }
    ifaces_[i]->getValue_slice(_return, key, idxFrom, size);
    return;
  }

  void getValueMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue> & _return, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValueMulti(_return, keys);
    }
    ifaces_[i]->getValueMulti(_return, keys);
    return;
  }

  bool hasItem(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const  ::OpenStars::Core::I64ToI64Set::Data::TItem item) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hasItem(key, item);
    }
    return ifaces_[i]->hasItem(key, item);
  }

  int32_t getSize(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSize(key);
    }
    return ifaces_[i]->getSize(key);
  }

  void getSizeMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t> & _return, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSizeMulti(_return, keys);
    }
    ifaces_[i]->getSizeMulti(_return, keys);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TI64ToI64SetServiceRConcurrentClient : virtual public TI64ToI64SetServiceRIf {
 public:
  TI64ToI64SetServiceRConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TI64ToI64SetServiceRConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getValue( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key);
  int32_t send_getValue(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key);
  void recv_getValue( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const int32_t seqid);
  void getValue_random( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t size);
  int32_t send_getValue_random(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t size);
  void recv_getValue_random( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const int32_t seqid);
  void getValue_slice( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t idxFrom, const int32_t size);
  int32_t send_getValue_slice(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const int32_t idxFrom, const int32_t size);
  void recv_getValue_slice( ::OpenStars::Core::I64ToI64Set::Data::TValue& _return, const int32_t seqid);
  void getValueMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue> & _return, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys);
  int32_t send_getValueMulti(const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys);
  void recv_getValueMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey,  ::OpenStars::Core::I64ToI64Set::Data::TValue> & _return, const int32_t seqid);
  bool hasItem(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const  ::OpenStars::Core::I64ToI64Set::Data::TItem item);
  int32_t send_hasItem(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key, const  ::OpenStars::Core::I64ToI64Set::Data::TItem item);
  bool recv_hasItem(const int32_t seqid);
  int32_t getSize(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key);
  int32_t send_getSize(const  ::OpenStars::Core::I64ToI64Set::Data::TKey key);
  int32_t recv_getSize(const int32_t seqid);
  void getSizeMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t> & _return, const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys);
  int32_t send_getSizeMulti(const std::vector< ::OpenStars::Core::I64ToI64Set::Data::TKey> & keys);
  void recv_getSizeMulti(std::map< ::OpenStars::Core::I64ToI64Set::Data::TKey, int32_t> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
