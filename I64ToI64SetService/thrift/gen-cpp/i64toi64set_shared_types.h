/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef i64toi64set_shared_TYPES_H
#define i64toi64set_shared_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace OpenStars { namespace Core { namespace I64ToI64Set { namespace Data {

typedef int64_t TKey;

typedef int64_t TItem;

class TValue;


class TValue : public virtual ::apache::thrift::TBase {
 public:

  TValue(const TValue&);
  TValue& operator=(const TValue&);
  TValue() {
  }

  virtual ~TValue() throw();
  std::vector<TItem>  items;

  void __set_items(const std::vector<TItem> & val);

  bool operator == (const TValue & rhs) const
  {
    if (!(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const TValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TValue &a, TValue &b);

std::ostream& operator<<(std::ostream& out, const TValue& obj);

}}}} // namespace

#endif
