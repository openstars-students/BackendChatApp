/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class TI64ToI64SetServiceR {
  public interface Iface {
    TValue getValue(long key);
    #if SILVERLIGHT
    IAsyncResult Begin_getValue(AsyncCallback callback, object state, long key);
    TValue End_getValue(IAsyncResult asyncResult);
    #endif
    TValue getValue_random(long key, int size);
    #if SILVERLIGHT
    IAsyncResult Begin_getValue_random(AsyncCallback callback, object state, long key, int size);
    TValue End_getValue_random(IAsyncResult asyncResult);
    #endif
    TValue getValue_slice(long key, int idxFrom, int size);
    #if SILVERLIGHT
    IAsyncResult Begin_getValue_slice(AsyncCallback callback, object state, long key, int idxFrom, int size);
    TValue End_getValue_slice(IAsyncResult asyncResult);
    #endif
    Dictionary<long, TValue> getValueMulti(List<long> keys);
    #if SILVERLIGHT
    IAsyncResult Begin_getValueMulti(AsyncCallback callback, object state, List<long> keys);
    Dictionary<long, TValue> End_getValueMulti(IAsyncResult asyncResult);
    #endif
    bool hasItem(long key, long item);
    #if SILVERLIGHT
    IAsyncResult Begin_hasItem(AsyncCallback callback, object state, long key, long item);
    bool End_hasItem(IAsyncResult asyncResult);
    #endif
    int getSize(long key);
    #if SILVERLIGHT
    IAsyncResult Begin_getSize(AsyncCallback callback, object state, long key);
    int End_getSize(IAsyncResult asyncResult);
    #endif
    Dictionary<long, int> getSizeMulti(List<long> keys);
    #if SILVERLIGHT
    IAsyncResult Begin_getSizeMulti(AsyncCallback callback, object state, List<long> keys);
    Dictionary<long, int> End_getSizeMulti(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_getValue(AsyncCallback callback, object state, long key)
    {
      return send_getValue(callback, state, key);
    }

    public TValue End_getValue(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getValue();
    }

    #endif

    public TValue getValue(long key)
    {
      #if !SILVERLIGHT
      send_getValue(key);
      return recv_getValue();

      #else
      var asyncResult = Begin_getValue(null, null, key);
      return End_getValue(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getValue(AsyncCallback callback, object state, long key)
    #else
    public void send_getValue(long key)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getValue", TMessageType.Call, seqid_));
      getValue_args args = new getValue_args();
      args.Key = key;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TValue recv_getValue()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getValue_result result = new getValue_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getValue failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getValue_random(AsyncCallback callback, object state, long key, int size)
    {
      return send_getValue_random(callback, state, key, size);
    }

    public TValue End_getValue_random(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getValue_random();
    }

    #endif

    public TValue getValue_random(long key, int size)
    {
      #if !SILVERLIGHT
      send_getValue_random(key, size);
      return recv_getValue_random();

      #else
      var asyncResult = Begin_getValue_random(null, null, key, size);
      return End_getValue_random(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getValue_random(AsyncCallback callback, object state, long key, int size)
    #else
    public void send_getValue_random(long key, int size)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getValue_random", TMessageType.Call, seqid_));
      getValue_random_args args = new getValue_random_args();
      args.Key = key;
      args.Size = size;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TValue recv_getValue_random()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getValue_random_result result = new getValue_random_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getValue_random failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getValue_slice(AsyncCallback callback, object state, long key, int idxFrom, int size)
    {
      return send_getValue_slice(callback, state, key, idxFrom, size);
    }

    public TValue End_getValue_slice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getValue_slice();
    }

    #endif

    public TValue getValue_slice(long key, int idxFrom, int size)
    {
      #if !SILVERLIGHT
      send_getValue_slice(key, idxFrom, size);
      return recv_getValue_slice();

      #else
      var asyncResult = Begin_getValue_slice(null, null, key, idxFrom, size);
      return End_getValue_slice(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getValue_slice(AsyncCallback callback, object state, long key, int idxFrom, int size)
    #else
    public void send_getValue_slice(long key, int idxFrom, int size)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getValue_slice", TMessageType.Call, seqid_));
      getValue_slice_args args = new getValue_slice_args();
      args.Key = key;
      args.IdxFrom = idxFrom;
      args.Size = size;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TValue recv_getValue_slice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getValue_slice_result result = new getValue_slice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getValue_slice failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getValueMulti(AsyncCallback callback, object state, List<long> keys)
    {
      return send_getValueMulti(callback, state, keys);
    }

    public Dictionary<long, TValue> End_getValueMulti(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getValueMulti();
    }

    #endif

    public Dictionary<long, TValue> getValueMulti(List<long> keys)
    {
      #if !SILVERLIGHT
      send_getValueMulti(keys);
      return recv_getValueMulti();

      #else
      var asyncResult = Begin_getValueMulti(null, null, keys);
      return End_getValueMulti(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getValueMulti(AsyncCallback callback, object state, List<long> keys)
    #else
    public void send_getValueMulti(List<long> keys)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getValueMulti", TMessageType.Call, seqid_));
      getValueMulti_args args = new getValueMulti_args();
      args.Keys = keys;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<long, TValue> recv_getValueMulti()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getValueMulti_result result = new getValueMulti_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getValueMulti failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_hasItem(AsyncCallback callback, object state, long key, long item)
    {
      return send_hasItem(callback, state, key, item);
    }

    public bool End_hasItem(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_hasItem();
    }

    #endif

    public bool hasItem(long key, long item)
    {
      #if !SILVERLIGHT
      send_hasItem(key, item);
      return recv_hasItem();

      #else
      var asyncResult = Begin_hasItem(null, null, key, item);
      return End_hasItem(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_hasItem(AsyncCallback callback, object state, long key, long item)
    #else
    public void send_hasItem(long key, long item)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("hasItem", TMessageType.Call, seqid_));
      hasItem_args args = new hasItem_args();
      args.Key = key;
      args.Item = item;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_hasItem()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      hasItem_result result = new hasItem_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "hasItem failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getSize(AsyncCallback callback, object state, long key)
    {
      return send_getSize(callback, state, key);
    }

    public int End_getSize(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSize();
    }

    #endif

    public int getSize(long key)
    {
      #if !SILVERLIGHT
      send_getSize(key);
      return recv_getSize();

      #else
      var asyncResult = Begin_getSize(null, null, key);
      return End_getSize(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSize(AsyncCallback callback, object state, long key)
    #else
    public void send_getSize(long key)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getSize", TMessageType.Call, seqid_));
      getSize_args args = new getSize_args();
      args.Key = key;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_getSize()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSize_result result = new getSize_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSize failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getSizeMulti(AsyncCallback callback, object state, List<long> keys)
    {
      return send_getSizeMulti(callback, state, keys);
    }

    public Dictionary<long, int> End_getSizeMulti(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSizeMulti();
    }

    #endif

    public Dictionary<long, int> getSizeMulti(List<long> keys)
    {
      #if !SILVERLIGHT
      send_getSizeMulti(keys);
      return recv_getSizeMulti();

      #else
      var asyncResult = Begin_getSizeMulti(null, null, keys);
      return End_getSizeMulti(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSizeMulti(AsyncCallback callback, object state, List<long> keys)
    #else
    public void send_getSizeMulti(List<long> keys)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getSizeMulti", TMessageType.Call, seqid_));
      getSizeMulti_args args = new getSizeMulti_args();
      args.Keys = keys;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<long, int> recv_getSizeMulti()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSizeMulti_result result = new getSizeMulti_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSizeMulti failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["getValue"] = getValue_Process;
      processMap_["getValue_random"] = getValue_random_Process;
      processMap_["getValue_slice"] = getValue_slice_Process;
      processMap_["getValueMulti"] = getValueMulti_Process;
      processMap_["hasItem"] = hasItem_Process;
      processMap_["getSize"] = getSize_Process;
      processMap_["getSizeMulti"] = getSizeMulti_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getValue_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getValue_args args = new getValue_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getValue_result result = new getValue_result();
      result.Success = iface_.getValue(args.Key);
      oprot.WriteMessageBegin(new TMessage("getValue", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getValue_random_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getValue_random_args args = new getValue_random_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getValue_random_result result = new getValue_random_result();
      result.Success = iface_.getValue_random(args.Key, args.Size);
      oprot.WriteMessageBegin(new TMessage("getValue_random", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getValue_slice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getValue_slice_args args = new getValue_slice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getValue_slice_result result = new getValue_slice_result();
      result.Success = iface_.getValue_slice(args.Key, args.IdxFrom, args.Size);
      oprot.WriteMessageBegin(new TMessage("getValue_slice", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getValueMulti_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getValueMulti_args args = new getValueMulti_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getValueMulti_result result = new getValueMulti_result();
      result.Success = iface_.getValueMulti(args.Keys);
      oprot.WriteMessageBegin(new TMessage("getValueMulti", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void hasItem_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      hasItem_args args = new hasItem_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      hasItem_result result = new hasItem_result();
      result.Success = iface_.hasItem(args.Key, args.Item);
      oprot.WriteMessageBegin(new TMessage("hasItem", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSize_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSize_args args = new getSize_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSize_result result = new getSize_result();
      result.Success = iface_.getSize(args.Key);
      oprot.WriteMessageBegin(new TMessage("getSize", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSizeMulti_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSizeMulti_args args = new getSizeMulti_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSizeMulti_result result = new getSizeMulti_result();
      result.Success = iface_.getSizeMulti(args.Keys);
      oprot.WriteMessageBegin(new TMessage("getSizeMulti", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getValue_args : TBase
  {
    private long _key;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
    }

    public getValue_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getValue_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getValue_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getValue_result : TBase
  {
    private TValue _success;

    public TValue Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getValue_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new TValue();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getValue_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getValue_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getValue_random_args : TBase
  {
    private long _key;
    private int _size;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public int Size
    {
      get
      {
        return _size;
      }
      set
      {
        __isset.size = true;
        this._size = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
      public bool size;
    }

    public getValue_random_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Size = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getValue_random_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      if (__isset.size) {
        field.Name = "size";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Size);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getValue_random_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(",Size: ");
      sb.Append(Size);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getValue_random_result : TBase
  {
    private TValue _success;

    public TValue Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getValue_random_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new TValue();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getValue_random_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getValue_random_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getValue_slice_args : TBase
  {
    private long _key;
    private int _idxFrom;
    private int _size;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public int IdxFrom
    {
      get
      {
        return _idxFrom;
      }
      set
      {
        __isset.idxFrom = true;
        this._idxFrom = value;
      }
    }

    public int Size
    {
      get
      {
        return _size;
      }
      set
      {
        __isset.size = true;
        this._size = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
      public bool idxFrom;
      public bool size;
    }

    public getValue_slice_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              IdxFrom = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Size = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getValue_slice_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      if (__isset.idxFrom) {
        field.Name = "idxFrom";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IdxFrom);
        oprot.WriteFieldEnd();
      }
      if (__isset.size) {
        field.Name = "size";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Size);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getValue_slice_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(",IdxFrom: ");
      sb.Append(IdxFrom);
      sb.Append(",Size: ");
      sb.Append(Size);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getValue_slice_result : TBase
  {
    private TValue _success;

    public TValue Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getValue_slice_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new TValue();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getValue_slice_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getValue_slice_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getValueMulti_args : TBase
  {
    private List<long> _keys;

    public List<long> Keys
    {
      get
      {
        return _keys;
      }
      set
      {
        __isset.keys = true;
        this._keys = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool keys;
    }

    public getValueMulti_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Keys = new List<long>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  long _elem2 = 0;
                  _elem2 = iprot.ReadI64();
                  Keys.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getValueMulti_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Keys != null && __isset.keys) {
        field.Name = "keys";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, Keys.Count));
          foreach (long _iter3 in Keys)
          {
            oprot.WriteI64(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getValueMulti_args(");
      sb.Append("Keys: ");
      sb.Append(Keys);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getValueMulti_result : TBase
  {
    private Dictionary<long, TValue> _success;

    public Dictionary<long, TValue> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getValueMulti_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Map) {
              {
                Success = new Dictionary<long, TValue>();
                TMap _map4 = iprot.ReadMapBegin();
                for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                {
                  long _key6;
                  TValue _val7;
                  _key6 = iprot.ReadI64();
                  _val7 = new TValue();
                  _val7.Read(iprot);
                  Success[_key6] = _val7;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getValueMulti_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, Success.Count));
            foreach (long _iter8 in Success.Keys)
            {
              oprot.WriteI64(_iter8);
              Success[_iter8].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getValueMulti_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class hasItem_args : TBase
  {
    private long _key;
    private long _item;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public long Item
    {
      get
      {
        return _item;
      }
      set
      {
        __isset.item = true;
        this._item = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
      public bool item;
    }

    public hasItem_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Item = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("hasItem_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      if (__isset.item) {
        field.Name = "item";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Item);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("hasItem_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(",Item: ");
      sb.Append(Item);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class hasItem_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public hasItem_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("hasItem_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("hasItem_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSize_args : TBase
  {
    private long _key;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
    }

    public getSize_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getSize_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getSize_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSize_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getSize_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              Success = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getSize_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getSize_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSizeMulti_args : TBase
  {
    private List<long> _keys;

    public List<long> Keys
    {
      get
      {
        return _keys;
      }
      set
      {
        __isset.keys = true;
        this._keys = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool keys;
    }

    public getSizeMulti_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Keys = new List<long>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  long _elem11 = 0;
                  _elem11 = iprot.ReadI64();
                  Keys.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getSizeMulti_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Keys != null && __isset.keys) {
        field.Name = "keys";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, Keys.Count));
          foreach (long _iter12 in Keys)
          {
            oprot.WriteI64(_iter12);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getSizeMulti_args(");
      sb.Append("Keys: ");
      sb.Append(Keys);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSizeMulti_result : TBase
  {
    private Dictionary<long, int> _success;

    public Dictionary<long, int> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getSizeMulti_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Map) {
              {
                Success = new Dictionary<long, int>();
                TMap _map13 = iprot.ReadMapBegin();
                for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
                {
                  long _key15;
                  int _val16;
                  _key15 = iprot.ReadI64();
                  _val16 = iprot.ReadI32();
                  Success[_key15] = _val16;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getSizeMulti_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I64, TType.I32, Success.Count));
            foreach (long _iter17 in Success.Keys)
            {
              oprot.WriteI64(_iter17);
              oprot.WriteI32(Success[_iter17]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getSizeMulti_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
