/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class TI64ToI64SetService {
  public interface Iface : TI64ToI64SetServiceR.Iface {
    bool setItems(long key, List<long> items);
    #if SILVERLIGHT
    IAsyncResult Begin_setItems(AsyncCallback callback, object state, long key, List<long> items);
    bool End_setItems(IAsyncResult asyncResult);
    #endif
    bool clearItems(long key);
    #if SILVERLIGHT
    IAsyncResult Begin_clearItems(AsyncCallback callback, object state, long key);
    bool End_clearItems(IAsyncResult asyncResult);
    #endif
    bool addItem(long key, long item);
    #if SILVERLIGHT
    IAsyncResult Begin_addItem(AsyncCallback callback, object state, long key, long item);
    bool End_addItem(IAsyncResult asyncResult);
    #endif
    bool addItems(long key, List<long> items);
    #if SILVERLIGHT
    IAsyncResult Begin_addItems(AsyncCallback callback, object state, long key, List<long> items);
    bool End_addItems(IAsyncResult asyncResult);
    #endif
    bool removeItem(long key, long item);
    #if SILVERLIGHT
    IAsyncResult Begin_removeItem(AsyncCallback callback, object state, long key, long item);
    bool End_removeItem(IAsyncResult asyncResult);
    #endif
    bool removeItems(long key, List<long> items);
    #if SILVERLIGHT
    IAsyncResult Begin_removeItems(AsyncCallback callback, object state, long key, List<long> items);
    bool End_removeItems(IAsyncResult asyncResult);
    #endif
  }

  public class Client : TI64ToI64SetServiceR.Client, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
    {
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_setItems(AsyncCallback callback, object state, long key, List<long> items)
    {
      return send_setItems(callback, state, key, items);
    }

    public bool End_setItems(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setItems();
    }

    #endif

    public bool setItems(long key, List<long> items)
    {
      #if !SILVERLIGHT
      send_setItems(key, items);
      return recv_setItems();

      #else
      var asyncResult = Begin_setItems(null, null, key, items);
      return End_setItems(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setItems(AsyncCallback callback, object state, long key, List<long> items)
    #else
    public void send_setItems(long key, List<long> items)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("setItems", TMessageType.Call, seqid_));
      setItems_args args = new setItems_args();
      args.Key = key;
      args.Items = items;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_setItems()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setItems_result result = new setItems_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setItems failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_clearItems(AsyncCallback callback, object state, long key)
    {
      return send_clearItems(callback, state, key);
    }

    public bool End_clearItems(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_clearItems();
    }

    #endif

    public bool clearItems(long key)
    {
      #if !SILVERLIGHT
      send_clearItems(key);
      return recv_clearItems();

      #else
      var asyncResult = Begin_clearItems(null, null, key);
      return End_clearItems(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_clearItems(AsyncCallback callback, object state, long key)
    #else
    public void send_clearItems(long key)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("clearItems", TMessageType.Call, seqid_));
      clearItems_args args = new clearItems_args();
      args.Key = key;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_clearItems()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      clearItems_result result = new clearItems_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "clearItems failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_addItem(AsyncCallback callback, object state, long key, long item)
    {
      return send_addItem(callback, state, key, item);
    }

    public bool End_addItem(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addItem();
    }

    #endif

    public bool addItem(long key, long item)
    {
      #if !SILVERLIGHT
      send_addItem(key, item);
      return recv_addItem();

      #else
      var asyncResult = Begin_addItem(null, null, key, item);
      return End_addItem(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addItem(AsyncCallback callback, object state, long key, long item)
    #else
    public void send_addItem(long key, long item)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("addItem", TMessageType.Call, seqid_));
      addItem_args args = new addItem_args();
      args.Key = key;
      args.Item = item;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_addItem()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addItem_result result = new addItem_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addItem failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_addItems(AsyncCallback callback, object state, long key, List<long> items)
    {
      return send_addItems(callback, state, key, items);
    }

    public bool End_addItems(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addItems();
    }

    #endif

    public bool addItems(long key, List<long> items)
    {
      #if !SILVERLIGHT
      send_addItems(key, items);
      return recv_addItems();

      #else
      var asyncResult = Begin_addItems(null, null, key, items);
      return End_addItems(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addItems(AsyncCallback callback, object state, long key, List<long> items)
    #else
    public void send_addItems(long key, List<long> items)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("addItems", TMessageType.Call, seqid_));
      addItems_args args = new addItems_args();
      args.Key = key;
      args.Items = items;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_addItems()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addItems_result result = new addItems_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addItems failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_removeItem(AsyncCallback callback, object state, long key, long item)
    {
      return send_removeItem(callback, state, key, item);
    }

    public bool End_removeItem(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_removeItem();
    }

    #endif

    public bool removeItem(long key, long item)
    {
      #if !SILVERLIGHT
      send_removeItem(key, item);
      return recv_removeItem();

      #else
      var asyncResult = Begin_removeItem(null, null, key, item);
      return End_removeItem(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeItem(AsyncCallback callback, object state, long key, long item)
    #else
    public void send_removeItem(long key, long item)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("removeItem", TMessageType.Call, seqid_));
      removeItem_args args = new removeItem_args();
      args.Key = key;
      args.Item = item;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_removeItem()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeItem_result result = new removeItem_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeItem failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_removeItems(AsyncCallback callback, object state, long key, List<long> items)
    {
      return send_removeItems(callback, state, key, items);
    }

    public bool End_removeItems(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_removeItems();
    }

    #endif

    public bool removeItems(long key, List<long> items)
    {
      #if !SILVERLIGHT
      send_removeItems(key, items);
      return recv_removeItems();

      #else
      var asyncResult = Begin_removeItems(null, null, key, items);
      return End_removeItems(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeItems(AsyncCallback callback, object state, long key, List<long> items)
    #else
    public void send_removeItems(long key, List<long> items)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("removeItems", TMessageType.Call, seqid_));
      removeItems_args args = new removeItems_args();
      args.Key = key;
      args.Items = items;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_removeItems()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeItems_result result = new removeItems_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeItems failed: unknown result");
    }

  }
  public class Processor : TI64ToI64SetServiceR.Processor, TProcessor {
    public Processor(Iface iface) : base(iface)
    {
      iface_ = iface;
      processMap_["setItems"] = setItems_Process;
      processMap_["clearItems"] = clearItems_Process;
      processMap_["addItem"] = addItem_Process;
      processMap_["addItems"] = addItems_Process;
      processMap_["removeItem"] = removeItem_Process;
      processMap_["removeItems"] = removeItems_Process;
    }

    private Iface iface_;

    public new bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void setItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setItems_args args = new setItems_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setItems_result result = new setItems_result();
      result.Success = iface_.setItems(args.Key, args.Items);
      oprot.WriteMessageBegin(new TMessage("setItems", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void clearItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      clearItems_args args = new clearItems_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      clearItems_result result = new clearItems_result();
      result.Success = iface_.clearItems(args.Key);
      oprot.WriteMessageBegin(new TMessage("clearItems", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addItem_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addItem_args args = new addItem_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addItem_result result = new addItem_result();
      result.Success = iface_.addItem(args.Key, args.Item);
      oprot.WriteMessageBegin(new TMessage("addItem", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addItems_args args = new addItems_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addItems_result result = new addItems_result();
      result.Success = iface_.addItems(args.Key, args.Items);
      oprot.WriteMessageBegin(new TMessage("addItems", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeItem_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeItem_args args = new removeItem_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeItem_result result = new removeItem_result();
      result.Success = iface_.removeItem(args.Key, args.Item);
      oprot.WriteMessageBegin(new TMessage("removeItem", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeItems_args args = new removeItems_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeItems_result result = new removeItems_result();
      result.Success = iface_.removeItems(args.Key, args.Items);
      oprot.WriteMessageBegin(new TMessage("removeItems", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setItems_args : TBase
  {
    private long _key;
    private List<long> _items;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public List<long> Items
    {
      get
      {
        return _items;
      }
      set
      {
        __isset.items = true;
        this._items = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
      public bool items;
    }

    public setItems_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Items = new List<long>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  long _elem20 = 0;
                  _elem20 = iprot.ReadI64();
                  Items.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("setItems_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      if (Items != null && __isset.items) {
        field.Name = "items";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, Items.Count));
          foreach (long _iter21 in Items)
          {
            oprot.WriteI64(_iter21);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("setItems_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(",Items: ");
      sb.Append(Items);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setItems_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public setItems_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("setItems_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("setItems_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class clearItems_args : TBase
  {
    private long _key;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
    }

    public clearItems_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("clearItems_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("clearItems_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class clearItems_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public clearItems_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("clearItems_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("clearItems_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addItem_args : TBase
  {
    private long _key;
    private long _item;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public long Item
    {
      get
      {
        return _item;
      }
      set
      {
        __isset.item = true;
        this._item = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
      public bool item;
    }

    public addItem_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Item = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addItem_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      if (__isset.item) {
        field.Name = "item";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Item);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addItem_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(",Item: ");
      sb.Append(Item);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addItem_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public addItem_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addItem_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addItem_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addItems_args : TBase
  {
    private long _key;
    private List<long> _items;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public List<long> Items
    {
      get
      {
        return _items;
      }
      set
      {
        __isset.items = true;
        this._items = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
      public bool items;
    }

    public addItems_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Items = new List<long>();
                TList _list22 = iprot.ReadListBegin();
                for( int _i23 = 0; _i23 < _list22.Count; ++_i23)
                {
                  long _elem24 = 0;
                  _elem24 = iprot.ReadI64();
                  Items.Add(_elem24);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addItems_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      if (Items != null && __isset.items) {
        field.Name = "items";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, Items.Count));
          foreach (long _iter25 in Items)
          {
            oprot.WriteI64(_iter25);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addItems_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(",Items: ");
      sb.Append(Items);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addItems_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public addItems_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("addItems_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("addItems_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeItem_args : TBase
  {
    private long _key;
    private long _item;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public long Item
    {
      get
      {
        return _item;
      }
      set
      {
        __isset.item = true;
        this._item = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
      public bool item;
    }

    public removeItem_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Item = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("removeItem_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      if (__isset.item) {
        field.Name = "item";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Item);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("removeItem_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(",Item: ");
      sb.Append(Item);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeItem_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public removeItem_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("removeItem_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("removeItem_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeItems_args : TBase
  {
    private long _key;
    private List<long> _items;

    public long Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public List<long> Items
    {
      get
      {
        return _items;
      }
      set
      {
        __isset.items = true;
        this._items = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
      public bool items;
    }

    public removeItems_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Key = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Items = new List<long>();
                TList _list26 = iprot.ReadListBegin();
                for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                {
                  long _elem28 = 0;
                  _elem28 = iprot.ReadI64();
                  Items.Add(_elem28);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("removeItems_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.key) {
        field.Name = "key";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Key);
        oprot.WriteFieldEnd();
      }
      if (Items != null && __isset.items) {
        field.Name = "items";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, Items.Count));
          foreach (long _iter29 in Items)
          {
            oprot.WriteI64(_iter29);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("removeItems_args(");
      sb.Append("Key: ");
      sb.Append(Key);
      sb.Append(",Items: ");
      sb.Append(Items);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeItems_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public removeItems_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("removeItems_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("removeItems_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
