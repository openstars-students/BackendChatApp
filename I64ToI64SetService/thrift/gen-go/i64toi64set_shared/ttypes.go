// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package i64toi64set_shared

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type TKey int64

type TItem int64

type TValue struct {
	Items []TItem `thrift:"items,1,required"`
}

func NewTValue() *TValue {
	return &TValue{}
}

func (p *TValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TValue) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Items = make([]TItem, 0, size)
	for i := 0; i < size; i++ {
		var _elem0 TItem
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem0 = TItem(v)
		}
		p.Items = append(p.Items, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TValue"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TValue) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Items != nil {
		if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:items: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Items)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Items {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:items: %s", p, err)
		}
	}
	return err
}

func (p *TValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TValue(%+v)", *p)
}
