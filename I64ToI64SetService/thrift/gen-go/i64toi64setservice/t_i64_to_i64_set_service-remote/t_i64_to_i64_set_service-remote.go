// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"i64toi64setservice"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  bool setItems(TKey key,  items)")
	fmt.Fprintln(os.Stderr, "  bool clearItems(TKey key)")
	fmt.Fprintln(os.Stderr, "  bool addItem(TKey key, TItem item)")
	fmt.Fprintln(os.Stderr, "  bool addItems(TKey key,  items)")
	fmt.Fprintln(os.Stderr, "  bool removeItem(TKey key, TItem item)")
	fmt.Fprintln(os.Stderr, "  bool removeItems(TKey key,  items)")
	fmt.Fprintln(os.Stderr, "  TValue getValue(TKey key)")
	fmt.Fprintln(os.Stderr, "  TValue getValue_random(TKey key, i32 size)")
	fmt.Fprintln(os.Stderr, "  TValue getValue_slice(TKey key, i32 idxFrom, i32 size)")
	fmt.Fprintln(os.Stderr, "   getValueMulti( keys)")
	fmt.Fprintln(os.Stderr, "  bool hasItem(TKey key, TItem item)")
	fmt.Fprintln(os.Stderr, "  i32 getSize(TKey key)")
	fmt.Fprintln(os.Stderr, "   getSizeMulti( keys)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := i64toi64setservice.NewTI64ToI64SetServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "setItems":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetItems requires 2 args")
			flag.Usage()
		}
		argvalue0, err85 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err85 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		arg86 := flag.Arg(2)
		mbTrans87 := thrift.NewTMemoryBufferLen(len(arg86))
		defer mbTrans87.Close()
		_, err88 := mbTrans87.WriteString(arg86)
		if err88 != nil {
			Usage()
			return
		}
		factory89 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt90 := factory89.GetProtocol(mbTrans87)
		containerStruct1 := i64toi64setservice.NewSetItemsArgs()
		err91 := containerStruct1.ReadField2(jsProt90)
		if err91 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Items
		value1 := argvalue1
		fmt.Print(client.SetItems(value0, value1))
		fmt.Print("\n")
		break
	case "clearItems":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ClearItems requires 1 args")
			flag.Usage()
		}
		argvalue0, err92 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err92 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		fmt.Print(client.ClearItems(value0))
		fmt.Print("\n")
		break
	case "addItem":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddItem requires 2 args")
			flag.Usage()
		}
		argvalue0, err93 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err93 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		argvalue1, err94 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err94 != nil {
			Usage()
			return
		}
		value1 := i64toi64setservice.TItem(argvalue1)
		fmt.Print(client.AddItem(value0, value1))
		fmt.Print("\n")
		break
	case "addItems":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddItems requires 2 args")
			flag.Usage()
		}
		argvalue0, err95 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err95 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		arg96 := flag.Arg(2)
		mbTrans97 := thrift.NewTMemoryBufferLen(len(arg96))
		defer mbTrans97.Close()
		_, err98 := mbTrans97.WriteString(arg96)
		if err98 != nil {
			Usage()
			return
		}
		factory99 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt100 := factory99.GetProtocol(mbTrans97)
		containerStruct1 := i64toi64setservice.NewAddItemsArgs()
		err101 := containerStruct1.ReadField2(jsProt100)
		if err101 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Items
		value1 := argvalue1
		fmt.Print(client.AddItems(value0, value1))
		fmt.Print("\n")
		break
	case "removeItem":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RemoveItem requires 2 args")
			flag.Usage()
		}
		argvalue0, err102 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err102 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		argvalue1, err103 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err103 != nil {
			Usage()
			return
		}
		value1 := i64toi64setservice.TItem(argvalue1)
		fmt.Print(client.RemoveItem(value0, value1))
		fmt.Print("\n")
		break
	case "removeItems":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RemoveItems requires 2 args")
			flag.Usage()
		}
		argvalue0, err104 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err104 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		arg105 := flag.Arg(2)
		mbTrans106 := thrift.NewTMemoryBufferLen(len(arg105))
		defer mbTrans106.Close()
		_, err107 := mbTrans106.WriteString(arg105)
		if err107 != nil {
			Usage()
			return
		}
		factory108 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt109 := factory108.GetProtocol(mbTrans106)
		containerStruct1 := i64toi64setservice.NewRemoveItemsArgs()
		err110 := containerStruct1.ReadField2(jsProt109)
		if err110 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Items
		value1 := argvalue1
		fmt.Print(client.RemoveItems(value0, value1))
		fmt.Print("\n")
		break
	case "getValue":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetValue requires 1 args")
			flag.Usage()
		}
		argvalue0, err111 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err111 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		fmt.Print(client.GetValue(value0))
		fmt.Print("\n")
		break
	case "getValue_random":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetValueRandom requires 2 args")
			flag.Usage()
		}
		argvalue0, err112 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err112 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		tmp1, err113 := (strconv.Atoi(flag.Arg(2)))
		if err113 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetValueRandom(value0, value1))
		fmt.Print("\n")
		break
	case "getValue_slice":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetValueSlice requires 3 args")
			flag.Usage()
		}
		argvalue0, err114 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err114 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		tmp1, err115 := (strconv.Atoi(flag.Arg(2)))
		if err115 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err116 := (strconv.Atoi(flag.Arg(3)))
		if err116 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetValueSlice(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getValueMulti":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetValueMulti requires 1 args")
			flag.Usage()
		}
		arg117 := flag.Arg(1)
		mbTrans118 := thrift.NewTMemoryBufferLen(len(arg117))
		defer mbTrans118.Close()
		_, err119 := mbTrans118.WriteString(arg117)
		if err119 != nil {
			Usage()
			return
		}
		factory120 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt121 := factory120.GetProtocol(mbTrans118)
		containerStruct0 := i64toi64setservice.NewGetValueMultiArgs()
		err122 := containerStruct0.ReadField1(jsProt121)
		if err122 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Keys
		value0 := argvalue0
		fmt.Print(client.GetValueMulti(value0))
		fmt.Print("\n")
		break
	case "hasItem":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "HasItem requires 2 args")
			flag.Usage()
		}
		argvalue0, err123 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err123 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		argvalue1, err124 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err124 != nil {
			Usage()
			return
		}
		value1 := i64toi64setservice.TItem(argvalue1)
		fmt.Print(client.HasItem(value0, value1))
		fmt.Print("\n")
		break
	case "getSize":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSize requires 1 args")
			flag.Usage()
		}
		argvalue0, err125 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err125 != nil {
			Usage()
			return
		}
		value0 := i64toi64setservice.TKey(argvalue0)
		fmt.Print(client.GetSize(value0))
		fmt.Print("\n")
		break
	case "getSizeMulti":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSizeMulti requires 1 args")
			flag.Usage()
		}
		arg126 := flag.Arg(1)
		mbTrans127 := thrift.NewTMemoryBufferLen(len(arg126))
		defer mbTrans127.Close()
		_, err128 := mbTrans127.WriteString(arg126)
		if err128 != nil {
			Usage()
			return
		}
		factory129 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt130 := factory129.GetProtocol(mbTrans127)
		containerStruct0 := i64toi64setservice.NewGetSizeMultiArgs()
		err131 := containerStruct0.ReadField1(jsProt130)
		if err131 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Keys
		value0 := argvalue0
		fmt.Print(client.GetSizeMulti(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
