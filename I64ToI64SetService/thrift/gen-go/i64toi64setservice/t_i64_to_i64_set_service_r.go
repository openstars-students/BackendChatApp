// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package i64toi64setservice

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"i64toi64set_shared"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = i64toi64set_shared.GoUnusedProtection__

type TI64ToI64SetServiceR interface {
	// Parameters:
	//  - Key
	GetValue(key i64toi64set_shared.TKey) (r *i64toi64set_shared.TValue, err error)
	// Parameters:
	//  - Key
	//  - Size
	GetValueRandom(key i64toi64set_shared.TKey, size int32) (r *i64toi64set_shared.TValue, err error)
	// Parameters:
	//  - Key
	//  - IdxFrom
	//  - Size
	GetValueSlice(key i64toi64set_shared.TKey, idxFrom int32, size int32) (r *i64toi64set_shared.TValue, err error)
	// Parameters:
	//  - Keys
	GetValueMulti(keys []i64toi64set_shared.TKey) (r map[i64toi64set_shared.TKey]*i64toi64set_shared.TValue, err error)
	// Parameters:
	//  - Key
	//  - Item
	HasItem(key i64toi64set_shared.TKey, item i64toi64set_shared.TItem) (r bool, err error)
	// Parameters:
	//  - Key
	GetSize(key i64toi64set_shared.TKey) (r int32, err error)
	// Parameters:
	//  - Keys
	GetSizeMulti(keys []i64toi64set_shared.TKey) (r map[i64toi64set_shared.TKey]int32, err error)
}

type TI64ToI64SetServiceRClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewTI64ToI64SetServiceRClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TI64ToI64SetServiceRClient {
	return &TI64ToI64SetServiceRClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewTI64ToI64SetServiceRClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TI64ToI64SetServiceRClient {
	return &TI64ToI64SetServiceRClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Key
func (p *TI64ToI64SetServiceRClient) GetValue(key i64toi64set_shared.TKey) (r *i64toi64set_shared.TValue, err error) {
	if err = p.sendGetValue(key); err != nil {
		return
	}
	return p.recvGetValue()
}

func (p *TI64ToI64SetServiceRClient) sendGetValue(key i64toi64set_shared.TKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getValue", thrift.CALL, p.SeqId)
	args0 := NewGetValueArgs()
	args0.Key = key
	err = args0.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *TI64ToI64SetServiceRClient) recvGetValue() (value *i64toi64set_shared.TValue, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1 := NewGetValueResult()
	err = result1.Read(iprot)
	iprot.ReadMessageEnd()
	value = result1.Success
	return
}

// Parameters:
//  - Key
//  - Size
func (p *TI64ToI64SetServiceRClient) GetValueRandom(key i64toi64set_shared.TKey, size int32) (r *i64toi64set_shared.TValue, err error) {
	if err = p.sendGetValueRandom(key, size); err != nil {
		return
	}
	return p.recvGetValueRandom()
}

func (p *TI64ToI64SetServiceRClient) sendGetValueRandom(key i64toi64set_shared.TKey, size int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getValue_random", thrift.CALL, p.SeqId)
	args4 := NewGetValueRandomArgs()
	args4.Key = key
	args4.Size = size
	err = args4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *TI64ToI64SetServiceRClient) recvGetValueRandom() (value *i64toi64set_shared.TValue, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result5 := NewGetValueRandomResult()
	err = result5.Read(iprot)
	iprot.ReadMessageEnd()
	value = result5.Success
	return
}

// Parameters:
//  - Key
//  - IdxFrom
//  - Size
func (p *TI64ToI64SetServiceRClient) GetValueSlice(key i64toi64set_shared.TKey, idxFrom int32, size int32) (r *i64toi64set_shared.TValue, err error) {
	if err = p.sendGetValueSlice(key, idxFrom, size); err != nil {
		return
	}
	return p.recvGetValueSlice()
}

func (p *TI64ToI64SetServiceRClient) sendGetValueSlice(key i64toi64set_shared.TKey, idxFrom int32, size int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getValue_slice", thrift.CALL, p.SeqId)
	args8 := NewGetValueSliceArgs()
	args8.Key = key
	args8.IdxFrom = idxFrom
	args8.Size = size
	err = args8.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *TI64ToI64SetServiceRClient) recvGetValueSlice() (value *i64toi64set_shared.TValue, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result9 := NewGetValueSliceResult()
	err = result9.Read(iprot)
	iprot.ReadMessageEnd()
	value = result9.Success
	return
}

// Parameters:
//  - Keys
func (p *TI64ToI64SetServiceRClient) GetValueMulti(keys []i64toi64set_shared.TKey) (r map[i64toi64set_shared.TKey]*i64toi64set_shared.TValue, err error) {
	if err = p.sendGetValueMulti(keys); err != nil {
		return
	}
	return p.recvGetValueMulti()
}

func (p *TI64ToI64SetServiceRClient) sendGetValueMulti(keys []i64toi64set_shared.TKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getValueMulti", thrift.CALL, p.SeqId)
	args12 := NewGetValueMultiArgs()
	args12.Keys = keys
	err = args12.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *TI64ToI64SetServiceRClient) recvGetValueMulti() (value map[i64toi64set_shared.TKey]*i64toi64set_shared.TValue, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result13 := NewGetValueMultiResult()
	err = result13.Read(iprot)
	iprot.ReadMessageEnd()
	value = result13.Success
	return
}

// Parameters:
//  - Key
//  - Item
func (p *TI64ToI64SetServiceRClient) HasItem(key i64toi64set_shared.TKey, item i64toi64set_shared.TItem) (r bool, err error) {
	if err = p.sendHasItem(key, item); err != nil {
		return
	}
	return p.recvHasItem()
}

func (p *TI64ToI64SetServiceRClient) sendHasItem(key i64toi64set_shared.TKey, item i64toi64set_shared.TItem) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("hasItem", thrift.CALL, p.SeqId)
	args16 := NewHasItemArgs()
	args16.Key = key
	args16.Item = item
	err = args16.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *TI64ToI64SetServiceRClient) recvHasItem() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result17 := NewHasItemResult()
	err = result17.Read(iprot)
	iprot.ReadMessageEnd()
	value = result17.Success
	return
}

// Parameters:
//  - Key
func (p *TI64ToI64SetServiceRClient) GetSize(key i64toi64set_shared.TKey) (r int32, err error) {
	if err = p.sendGetSize(key); err != nil {
		return
	}
	return p.recvGetSize()
}

func (p *TI64ToI64SetServiceRClient) sendGetSize(key i64toi64set_shared.TKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getSize", thrift.CALL, p.SeqId)
	args20 := NewGetSizeArgs()
	args20.Key = key
	err = args20.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *TI64ToI64SetServiceRClient) recvGetSize() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result21 := NewGetSizeResult()
	err = result21.Read(iprot)
	iprot.ReadMessageEnd()
	value = result21.Success
	return
}

// Parameters:
//  - Keys
func (p *TI64ToI64SetServiceRClient) GetSizeMulti(keys []i64toi64set_shared.TKey) (r map[i64toi64set_shared.TKey]int32, err error) {
	if err = p.sendGetSizeMulti(keys); err != nil {
		return
	}
	return p.recvGetSizeMulti()
}

func (p *TI64ToI64SetServiceRClient) sendGetSizeMulti(keys []i64toi64set_shared.TKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getSizeMulti", thrift.CALL, p.SeqId)
	args24 := NewGetSizeMultiArgs()
	args24.Keys = keys
	err = args24.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *TI64ToI64SetServiceRClient) recvGetSizeMulti() (value map[i64toi64set_shared.TKey]int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result25 := NewGetSizeMultiResult()
	err = result25.Read(iprot)
	iprot.ReadMessageEnd()
	value = result25.Success
	return
}

type TI64ToI64SetServiceRProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TI64ToI64SetServiceR
}

func (p *TI64ToI64SetServiceRProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TI64ToI64SetServiceRProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TI64ToI64SetServiceRProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTI64ToI64SetServiceRProcessor(handler TI64ToI64SetServiceR) *TI64ToI64SetServiceRProcessor {

	self28 := &TI64ToI64SetServiceRProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self28.processorMap["getValue"] = &tI64ToI64SetServiceRProcessorGetValue{handler: handler}
	self28.processorMap["getValue_random"] = &tI64ToI64SetServiceRProcessorGetValueRandom{handler: handler}
	self28.processorMap["getValue_slice"] = &tI64ToI64SetServiceRProcessorGetValueSlice{handler: handler}
	self28.processorMap["getValueMulti"] = &tI64ToI64SetServiceRProcessorGetValueMulti{handler: handler}
	self28.processorMap["hasItem"] = &tI64ToI64SetServiceRProcessorHasItem{handler: handler}
	self28.processorMap["getSize"] = &tI64ToI64SetServiceRProcessorGetSize{handler: handler}
	self28.processorMap["getSizeMulti"] = &tI64ToI64SetServiceRProcessorGetSizeMulti{handler: handler}
	return self28
}

func (p *TI64ToI64SetServiceRProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x29 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x29.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x29

}

type tI64ToI64SetServiceRProcessorGetValue struct {
	handler TI64ToI64SetServiceR
}

func (p *tI64ToI64SetServiceRProcessorGetValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetValueArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetValueResult()
	if result.Success, err = p.handler.GetValue(args.Key); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValue: "+err.Error())
		oprot.WriteMessageBegin("getValue", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getValue", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tI64ToI64SetServiceRProcessorGetValueRandom struct {
	handler TI64ToI64SetServiceR
}

func (p *tI64ToI64SetServiceRProcessorGetValueRandom) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetValueRandomArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getValue_random", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetValueRandomResult()
	if result.Success, err = p.handler.GetValueRandom(args.Key, args.Size); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValue_random: "+err.Error())
		oprot.WriteMessageBegin("getValue_random", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getValue_random", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tI64ToI64SetServiceRProcessorGetValueSlice struct {
	handler TI64ToI64SetServiceR
}

func (p *tI64ToI64SetServiceRProcessorGetValueSlice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetValueSliceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getValue_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetValueSliceResult()
	if result.Success, err = p.handler.GetValueSlice(args.Key, args.IdxFrom, args.Size); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValue_slice: "+err.Error())
		oprot.WriteMessageBegin("getValue_slice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getValue_slice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tI64ToI64SetServiceRProcessorGetValueMulti struct {
	handler TI64ToI64SetServiceR
}

func (p *tI64ToI64SetServiceRProcessorGetValueMulti) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetValueMultiArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getValueMulti", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetValueMultiResult()
	if result.Success, err = p.handler.GetValueMulti(args.Keys); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValueMulti: "+err.Error())
		oprot.WriteMessageBegin("getValueMulti", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getValueMulti", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tI64ToI64SetServiceRProcessorHasItem struct {
	handler TI64ToI64SetServiceR
}

func (p *tI64ToI64SetServiceRProcessorHasItem) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewHasItemArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("hasItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewHasItemResult()
	if result.Success, err = p.handler.HasItem(args.Key, args.Item); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hasItem: "+err.Error())
		oprot.WriteMessageBegin("hasItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("hasItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tI64ToI64SetServiceRProcessorGetSize struct {
	handler TI64ToI64SetServiceR
}

func (p *tI64ToI64SetServiceRProcessorGetSize) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSizeArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSize", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSizeResult()
	if result.Success, err = p.handler.GetSize(args.Key); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSize: "+err.Error())
		oprot.WriteMessageBegin("getSize", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getSize", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tI64ToI64SetServiceRProcessorGetSizeMulti struct {
	handler TI64ToI64SetServiceR
}

func (p *tI64ToI64SetServiceRProcessorGetSizeMulti) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSizeMultiArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSizeMulti", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSizeMultiResult()
	if result.Success, err = p.handler.GetSizeMulti(args.Keys); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSizeMulti: "+err.Error())
		oprot.WriteMessageBegin("getSizeMulti", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getSizeMulti", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type GetValueArgs struct {
	Key i64toi64set_shared.TKey `thrift:"key,1"`
}

func NewGetValueArgs() *GetValueArgs {
	return &GetValueArgs{}
}

func (p *GetValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValueArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = i64toi64set_shared.TKey(v)
	}
	return nil
}

func (p *GetValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValue_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *GetValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValueArgs(%+v)", *p)
}

type GetValueResult struct {
	Success *i64toi64set_shared.TValue `thrift:"success,0"`
}

func NewGetValueResult() *GetValueResult {
	return &GetValueResult{}
}

func (p *GetValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValueResult) readField0(iprot thrift.TProtocol) error {
	p.Success = i64toi64set_shared.NewTValue()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValue_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValueResult(%+v)", *p)
}

type GetValueRandomArgs struct {
	Key  i64toi64set_shared.TKey `thrift:"key,1"`
	Size int32                   `thrift:"size,2"`
}

func NewGetValueRandomArgs() *GetValueRandomArgs {
	return &GetValueRandomArgs{}
}

func (p *GetValueRandomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValueRandomArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = i64toi64set_shared.TKey(v)
	}
	return nil
}

func (p *GetValueRandomArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetValueRandomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValue_random_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValueRandomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *GetValueRandomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:size: %s", p, err)
	}
	return err
}

func (p *GetValueRandomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValueRandomArgs(%+v)", *p)
}

type GetValueRandomResult struct {
	Success *i64toi64set_shared.TValue `thrift:"success,0"`
}

func NewGetValueRandomResult() *GetValueRandomResult {
	return &GetValueRandomResult{}
}

func (p *GetValueRandomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValueRandomResult) readField0(iprot thrift.TProtocol) error {
	p.Success = i64toi64set_shared.NewTValue()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetValueRandomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValue_random_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValueRandomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetValueRandomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValueRandomResult(%+v)", *p)
}

type GetValueSliceArgs struct {
	Key     i64toi64set_shared.TKey `thrift:"key,1"`
	IdxFrom int32                   `thrift:"idxFrom,2"`
	Size    int32                   `thrift:"size,3"`
}

func NewGetValueSliceArgs() *GetValueSliceArgs {
	return &GetValueSliceArgs{}
}

func (p *GetValueSliceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValueSliceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = i64toi64set_shared.TKey(v)
	}
	return nil
}

func (p *GetValueSliceArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.IdxFrom = v
	}
	return nil
}

func (p *GetValueSliceArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetValueSliceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValue_slice_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValueSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *GetValueSliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idxFrom", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:idxFrom: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IdxFrom)); err != nil {
		return fmt.Errorf("%T.idxFrom (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:idxFrom: %s", p, err)
	}
	return err
}

func (p *GetValueSliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:size: %s", p, err)
	}
	return err
}

func (p *GetValueSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValueSliceArgs(%+v)", *p)
}

type GetValueSliceResult struct {
	Success *i64toi64set_shared.TValue `thrift:"success,0"`
}

func NewGetValueSliceResult() *GetValueSliceResult {
	return &GetValueSliceResult{}
}

func (p *GetValueSliceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValueSliceResult) readField0(iprot thrift.TProtocol) error {
	p.Success = i64toi64set_shared.NewTValue()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetValueSliceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValue_slice_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValueSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetValueSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValueSliceResult(%+v)", *p)
}

type GetValueMultiArgs struct {
	Keys []i64toi64set_shared.TKey `thrift:"keys,1"`
}

func NewGetValueMultiArgs() *GetValueMultiArgs {
	return &GetValueMultiArgs{}
}

func (p *GetValueMultiArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValueMultiArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Keys = make([]i64toi64set_shared.TKey, 0, size)
	for i := 0; i < size; i++ {
		var _elem30 i64toi64set_shared.TKey
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem30 = i64toi64set_shared.TKey(v)
		}
		p.Keys = append(p.Keys, _elem30)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetValueMultiArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValueMulti_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValueMultiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Keys != nil {
		if err := oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:keys: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Keys)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Keys {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:keys: %s", p, err)
		}
	}
	return err
}

func (p *GetValueMultiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValueMultiArgs(%+v)", *p)
}

type GetValueMultiResult struct {
	Success map[i64toi64set_shared.TKey]*i64toi64set_shared.TValue `thrift:"success,0"`
}

func NewGetValueMultiResult() *GetValueMultiResult {
	return &GetValueMultiResult{}
}

func (p *GetValueMultiResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValueMultiResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Success = make(map[i64toi64set_shared.TKey]*i64toi64set_shared.TValue, size)
	for i := 0; i < size; i++ {
		var _key31 i64toi64set_shared.TKey
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key31 = i64toi64set_shared.TKey(v)
		}
		_val32 := i64toi64set_shared.NewTValue()
		if err := _val32.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val32)
		}
		p.Success[_key31] = _val32
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *GetValueMultiResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValueMulti_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValueMultiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Success {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetValueMultiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValueMultiResult(%+v)", *p)
}

type HasItemArgs struct {
	Key  i64toi64set_shared.TKey  `thrift:"key,1"`
	Item i64toi64set_shared.TItem `thrift:"item,2"`
}

func NewHasItemArgs() *HasItemArgs {
	return &HasItemArgs{}
}

func (p *HasItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HasItemArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = i64toi64set_shared.TKey(v)
	}
	return nil
}

func (p *HasItemArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Item = i64toi64set_shared.TItem(v)
	}
	return nil
}

func (p *HasItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hasItem_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *HasItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *HasItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("item", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:item: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Item)); err != nil {
		return fmt.Errorf("%T.item (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:item: %s", p, err)
	}
	return err
}

func (p *HasItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HasItemArgs(%+v)", *p)
}

type HasItemResult struct {
	Success bool `thrift:"success,0"`
}

func NewHasItemResult() *HasItemResult {
	return &HasItemResult{}
}

func (p *HasItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HasItemResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *HasItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hasItem_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *HasItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *HasItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HasItemResult(%+v)", *p)
}

type GetSizeArgs struct {
	Key i64toi64set_shared.TKey `thrift:"key,1"`
}

func NewGetSizeArgs() *GetSizeArgs {
	return &GetSizeArgs{}
}

func (p *GetSizeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSizeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = i64toi64set_shared.TKey(v)
	}
	return nil
}

func (p *GetSizeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSize_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSizeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *GetSizeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSizeArgs(%+v)", *p)
}

type GetSizeResult struct {
	Success int32 `thrift:"success,0"`
}

func NewGetSizeResult() *GetSizeResult {
	return &GetSizeResult{}
}

func (p *GetSizeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSizeResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetSizeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSize_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSizeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetSizeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSizeResult(%+v)", *p)
}

type GetSizeMultiArgs struct {
	Keys []i64toi64set_shared.TKey `thrift:"keys,1"`
}

func NewGetSizeMultiArgs() *GetSizeMultiArgs {
	return &GetSizeMultiArgs{}
}

func (p *GetSizeMultiArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSizeMultiArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Keys = make([]i64toi64set_shared.TKey, 0, size)
	for i := 0; i < size; i++ {
		var _elem33 i64toi64set_shared.TKey
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem33 = i64toi64set_shared.TKey(v)
		}
		p.Keys = append(p.Keys, _elem33)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetSizeMultiArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSizeMulti_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSizeMultiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Keys != nil {
		if err := oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:keys: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Keys)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Keys {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:keys: %s", p, err)
		}
	}
	return err
}

func (p *GetSizeMultiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSizeMultiArgs(%+v)", *p)
}

type GetSizeMultiResult struct {
	Success map[i64toi64set_shared.TKey]int32 `thrift:"success,0"`
}

func NewGetSizeMultiResult() *GetSizeMultiResult {
	return &GetSizeMultiResult{}
}

func (p *GetSizeMultiResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSizeMultiResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Success = make(map[i64toi64set_shared.TKey]int32, size)
	for i := 0; i < size; i++ {
		var _key34 i64toi64set_shared.TKey
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key34 = i64toi64set_shared.TKey(v)
		}
		var _val35 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val35 = v
		}
		p.Success[_key34] = _val35
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *GetSizeMultiResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSizeMulti_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSizeMultiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I32, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Success {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSizeMultiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSizeMultiResult(%+v)", *p)
}
