/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef userstore_TYPES_H
#define userstore_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace OpenStars { namespace Platform { namespace UserStore {

struct TErrorCode {
  enum type {
    EGood = 0,
    ENotFound = -1,
    EUnknown = -2,
    EDataExisted = -3
  };
};

extern const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val);

typedef int64_t TKey;

typedef class TUserInfo TData;

class TUserInfo;

class TDataResult;

class TListDataUsers;

typedef struct _TUserInfo__isset {
  _TUserInfo__isset() : uid(false), username(false), displayname(false), emails(false), mobiles(false), listfriend(false), listconversation(false), status(false), publickey(false) {}
  bool uid :1;
  bool username :1;
  bool displayname :1;
  bool emails :1;
  bool mobiles :1;
  bool listfriend :1;
  bool listconversation :1;
  bool status :1;
  bool publickey :1;
} _TUserInfo__isset;

class TUserInfo : public virtual ::apache::thrift::TBase {
 public:

  TUserInfo(const TUserInfo&);
  TUserInfo& operator=(const TUserInfo&);
  TUserInfo() : uid(0), username(), displayname(), emails(), mobiles(), status(0), publickey() {
  }

  virtual ~TUserInfo() throw();
  TKey uid;
  std::string username;
  std::string displayname;
  std::string emails;
  std::string mobiles;
  std::vector<int64_t>  listfriend;
  std::vector<int64_t>  listconversation;
  int64_t status;
  std::string publickey;

  _TUserInfo__isset __isset;

  void __set_uid(const TKey val);

  void __set_username(const std::string& val);

  void __set_displayname(const std::string& val);

  void __set_emails(const std::string& val);

  void __set_mobiles(const std::string& val);

  void __set_listfriend(const std::vector<int64_t> & val);

  void __set_listconversation(const std::vector<int64_t> & val);

  void __set_status(const int64_t val);

  void __set_publickey(const std::string& val);

  bool operator == (const TUserInfo & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(displayname == rhs.displayname))
      return false;
    if (!(emails == rhs.emails))
      return false;
    if (!(mobiles == rhs.mobiles))
      return false;
    if (!(listfriend == rhs.listfriend))
      return false;
    if (!(listconversation == rhs.listconversation))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(publickey == rhs.publickey))
      return false;
    return true;
  }
  bool operator != (const TUserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUserInfo &a, TUserInfo &b);

std::ostream& operator<<(std::ostream& out, const TUserInfo& obj);

typedef struct _TDataResult__isset {
  _TDataResult__isset() : errorCode(false), data(false) {}
  bool errorCode :1;
  bool data :1;
} _TDataResult__isset;

class TDataResult : public virtual ::apache::thrift::TBase {
 public:

  TDataResult(const TDataResult&);
  TDataResult& operator=(const TDataResult&);
  TDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TDataResult() throw();
  TErrorCode::type errorCode;
  TUserInfo data;

  _TDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_data(const TUserInfo& val);

  bool operator == (const TDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataResult &a, TDataResult &b);

std::ostream& operator<<(std::ostream& out, const TDataResult& obj);

typedef struct _TListDataUsers__isset {
  _TListDataUsers__isset() : errorCode(false), listuser(false) {}
  bool errorCode :1;
  bool listuser :1;
} _TListDataUsers__isset;

class TListDataUsers : public virtual ::apache::thrift::TBase {
 public:

  TListDataUsers(const TListDataUsers&);
  TListDataUsers& operator=(const TListDataUsers&);
  TListDataUsers() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TListDataUsers() throw();
  TErrorCode::type errorCode;
  std::map<TKey, TUserInfo>  listuser;

  _TListDataUsers__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_listuser(const std::map<TKey, TUserInfo> & val);

  bool operator == (const TListDataUsers & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.listuser != rhs.__isset.listuser)
      return false;
    else if (__isset.listuser && !(listuser == rhs.listuser))
      return false;
    return true;
  }
  bool operator != (const TListDataUsers &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TListDataUsers & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TListDataUsers &a, TListDataUsers &b);

std::ostream& operator<<(std::ostream& out, const TListDataUsers& obj);

}}} // namespace

#endif
