/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "userstore_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace OpenStars { namespace Platform { namespace UserStore {

int _kTErrorCodeValues[] = {
  TErrorCode::EGood,
  TErrorCode::ENotFound,
  TErrorCode::EUnknown,
  TErrorCode::EDataExisted
};
const char* _kTErrorCodeNames[] = {
  "EGood",
  "ENotFound",
  "EUnknown",
  "EDataExisted"
};
const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTErrorCodeValues, _kTErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TUserInfo::~TUserInfo() throw() {
}


void TUserInfo::__set_uid(const TKey val) {
  this->uid = val;
}

void TUserInfo::__set_username(const std::string& val) {
  this->username = val;
}

void TUserInfo::__set_displayname(const std::string& val) {
  this->displayname = val;
}

void TUserInfo::__set_emails(const std::string& val) {
  this->emails = val;
}

void TUserInfo::__set_mobiles(const std::string& val) {
  this->mobiles = val;
}

void TUserInfo::__set_listfriend(const std::vector<int64_t> & val) {
  this->listfriend = val;
}

void TUserInfo::__set_listconversation(const std::vector<int64_t> & val) {
  this->listconversation = val;
}

void TUserInfo::__set_status(const int64_t val) {
  this->status = val;
}

void TUserInfo::__set_publickey(const std::string& val) {
  this->publickey = val;
}

void TUserInfo::__set_avatar(const std::string& val) {
  this->avatar = val;
}
std::ostream& operator<<(std::ostream& out, const TUserInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TUserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayname);
          this->__isset.displayname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->emails);
          this->__isset.emails = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mobiles);
          this->__isset.mobiles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listfriend.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->listfriend.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->listfriend[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listfriend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listconversation.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->listconversation.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI64(this->listconversation[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listconversation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->publickey);
          this->__isset.publickey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar);
          this->__isset.avatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TUserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TUserInfo");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->displayname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emails", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->emails);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mobiles", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->mobiles);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("listfriend", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->listfriend.size()));
    std::vector<int64_t> ::const_iterator _iter10;
    for (_iter10 = this->listfriend.begin(); _iter10 != this->listfriend.end(); ++_iter10)
    {
      xfer += oprot->writeI64((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("listconversation", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->listconversation.size()));
    std::vector<int64_t> ::const_iterator _iter11;
    for (_iter11 = this->listconversation.begin(); _iter11 != this->listconversation.end(); ++_iter11)
    {
      xfer += oprot->writeI64((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("publickey", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->publickey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatar", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->avatar);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TUserInfo &a, TUserInfo &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.username, b.username);
  swap(a.displayname, b.displayname);
  swap(a.emails, b.emails);
  swap(a.mobiles, b.mobiles);
  swap(a.listfriend, b.listfriend);
  swap(a.listconversation, b.listconversation);
  swap(a.status, b.status);
  swap(a.publickey, b.publickey);
  swap(a.avatar, b.avatar);
  swap(a.__isset, b.__isset);
}

TUserInfo::TUserInfo(const TUserInfo& other12) {
  uid = other12.uid;
  username = other12.username;
  displayname = other12.displayname;
  emails = other12.emails;
  mobiles = other12.mobiles;
  listfriend = other12.listfriend;
  listconversation = other12.listconversation;
  status = other12.status;
  publickey = other12.publickey;
  avatar = other12.avatar;
  __isset = other12.__isset;
}
TUserInfo& TUserInfo::operator=(const TUserInfo& other13) {
  uid = other13.uid;
  username = other13.username;
  displayname = other13.displayname;
  emails = other13.emails;
  mobiles = other13.mobiles;
  listfriend = other13.listfriend;
  listconversation = other13.listconversation;
  status = other13.status;
  publickey = other13.publickey;
  avatar = other13.avatar;
  __isset = other13.__isset;
  return *this;
}
void TUserInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUserInfo(";
  out << "uid=" << to_string(uid);
  out << ", " << "username=" << to_string(username);
  out << ", " << "displayname=" << to_string(displayname);
  out << ", " << "emails=" << to_string(emails);
  out << ", " << "mobiles=" << to_string(mobiles);
  out << ", " << "listfriend=" << to_string(listfriend);
  out << ", " << "listconversation=" << to_string(listconversation);
  out << ", " << "status=" << to_string(status);
  out << ", " << "publickey=" << to_string(publickey);
  out << ", " << "avatar=" << to_string(avatar);
  out << ")";
}


TDataResult::~TDataResult() throw() {
}


void TDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TDataResult::__set_data(const TUserInfo& val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const TDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->errorCode = (TErrorCode::type)ecast14;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataResult &a, TDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TDataResult::TDataResult(const TDataResult& other15) {
  errorCode = other15.errorCode;
  data = other15.data;
  __isset = other15.__isset;
}
TDataResult& TDataResult::operator=(const TDataResult& other16) {
  errorCode = other16.errorCode;
  data = other16.data;
  __isset = other16.__isset;
  return *this;
}
void TDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


TListDataUsers::~TListDataUsers() throw() {
}


void TListDataUsers::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TListDataUsers::__set_listuser(const std::map<TKey, TUserInfo> & val) {
  this->listuser = val;
__isset.listuser = true;
}
std::ostream& operator<<(std::ostream& out, const TListDataUsers& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TListDataUsers::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast17;
          xfer += iprot->readI32(ecast17);
          this->errorCode = (TErrorCode::type)ecast17;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->listuser.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _ktype19;
            ::apache::thrift::protocol::TType _vtype20;
            xfer += iprot->readMapBegin(_ktype19, _vtype20, _size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              TKey _key23;
              xfer += iprot->readI64(_key23);
              TUserInfo& _val24 = this->listuser[_key23];
              xfer += _val24.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.listuser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TListDataUsers::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TListDataUsers");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.listuser) {
    xfer += oprot->writeFieldBegin("listuser", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->listuser.size()));
      std::map<TKey, TUserInfo> ::const_iterator _iter25;
      for (_iter25 = this->listuser.begin(); _iter25 != this->listuser.end(); ++_iter25)
      {
        xfer += oprot->writeI64(_iter25->first);
        xfer += _iter25->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TListDataUsers &a, TListDataUsers &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.listuser, b.listuser);
  swap(a.__isset, b.__isset);
}

TListDataUsers::TListDataUsers(const TListDataUsers& other26) {
  errorCode = other26.errorCode;
  listuser = other26.listuser;
  __isset = other26.__isset;
}
TListDataUsers& TListDataUsers::operator=(const TListDataUsers& other27) {
  errorCode = other27.errorCode;
  listuser = other27.listuser;
  __isset = other27.__isset;
  return *this;
}
void TListDataUsers::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TListDataUsers(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "listuser="; (__isset.listuser ? (out << to_string(listuser)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
