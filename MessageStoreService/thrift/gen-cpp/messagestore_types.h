/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef messagestore_TYPES_H
#define messagestore_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace OpenStars { namespace Platform { namespace MessageStore {

struct TErrorCode {
  enum type {
    EGood = 0,
    ENotFound = -1,
    EUnknown = -2,
    EDataExisted = -3
  };
};

extern const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val);

typedef int64_t TKey;

typedef class TMessageInfo TData;

class TMessageInfo;

class TDataResult;

class TListDataResult;

typedef struct _TMessageInfo__isset {
  _TMessageInfo__isset() : mid(false), content(false), sender(false), cid(false), timesend(false), status(false) {}
  bool mid :1;
  bool content :1;
  bool sender :1;
  bool cid :1;
  bool timesend :1;
  bool status :1;
} _TMessageInfo__isset;

class TMessageInfo : public virtual ::apache::thrift::TBase {
 public:

  TMessageInfo(const TMessageInfo&);
  TMessageInfo& operator=(const TMessageInfo&);
  TMessageInfo() : mid(0), content(), sender(), cid(0), timesend(0), status(0) {
  }

  virtual ~TMessageInfo() throw();
  TKey mid;
  std::string content;
  std::string sender;
  int64_t cid;
  int64_t timesend;
  int64_t status;

  _TMessageInfo__isset __isset;

  void __set_mid(const TKey val);

  void __set_content(const std::string& val);

  void __set_sender(const std::string& val);

  void __set_cid(const int64_t val);

  void __set_timesend(const int64_t val);

  void __set_status(const int64_t val);

  bool operator == (const TMessageInfo & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(sender == rhs.sender))
      return false;
    if (!(cid == rhs.cid))
      return false;
    if (!(timesend == rhs.timesend))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TMessageInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMessageInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMessageInfo &a, TMessageInfo &b);

std::ostream& operator<<(std::ostream& out, const TMessageInfo& obj);

typedef struct _TDataResult__isset {
  _TDataResult__isset() : errorCode(false), data(false) {}
  bool errorCode :1;
  bool data :1;
} _TDataResult__isset;

class TDataResult : public virtual ::apache::thrift::TBase {
 public:

  TDataResult(const TDataResult&);
  TDataResult& operator=(const TDataResult&);
  TDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TDataResult() throw();
  TErrorCode::type errorCode;
  TMessageInfo data;

  _TDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_data(const TMessageInfo& val);

  bool operator == (const TDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataResult &a, TDataResult &b);

std::ostream& operator<<(std::ostream& out, const TDataResult& obj);

typedef struct _TListDataResult__isset {
  _TListDataResult__isset() : errorCode(false), listdata(false) {}
  bool errorCode :1;
  bool listdata :1;
} _TListDataResult__isset;

class TListDataResult : public virtual ::apache::thrift::TBase {
 public:

  TListDataResult(const TListDataResult&);
  TListDataResult& operator=(const TListDataResult&);
  TListDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TListDataResult() throw();
  TErrorCode::type errorCode;
  std::map<TKey, TMessageInfo>  listdata;

  _TListDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_listdata(const std::map<TKey, TMessageInfo> & val);

  bool operator == (const TListDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.listdata != rhs.__isset.listdata)
      return false;
    else if (__isset.listdata && !(listdata == rhs.listdata))
      return false;
    return true;
  }
  bool operator != (const TListDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TListDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TListDataResult &a, TListDataResult &b);

std::ostream& operator<<(std::ostream& out, const TListDataResult& obj);

}}} // namespace

#endif
